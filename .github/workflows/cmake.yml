name: CMake - Pull Request

on:
  [pull_request, workflow_dispatch]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  linux_build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: "Linux Build"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install ninja
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build
        sudo apt-get install -y build-essential
        sudo find / | grep ninja
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake --version
        cmake -G "Ninja" -DCMAKE_BUILD_TYPE="${{env.BUILD_TYPE}}" -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/out/install" -DCMAKE_C_COMPILER="/usr/bin/cc" -DCMAKE_CXX_COMPILER="/usr/bin/c++" "${{github.workspace}}"
        ls -lah .
        ls -lah ${{github.workspace}}/out
        ls -lah ${{github.workspace}}/out/build

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
